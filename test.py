#!/usr/bin/python
# Copyright 2017 loblab
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Self test scripts

import time 
import sys
import random
from bitstring import *
from ask_struct import *
from ask_config import *

def testDecode1():
    ts = [1502507445.157925, 1502507445.162985, 1502507445.164383, 1502507445.165382, 1502507445.16588, 1502507445.16638, 1502507445.168378, 1502507445.169378, 1502507445.170377, 1502507445.170876, 1502507445.171376, 1502507445.171875, 1502507445.172374, 1502507445.173473, 1502507445.173973, 1502507445.174971, 1502507445.176469, 1502507445.177468, 1502507445.177968, 1502507445.178968, 1502507445.180429, 1502507445.181464, 1502507445.181964, 1502507445.183987, 1502507445.189056]
    sig = Signal()
    sig.decode(ts)

def testDecode2():
    ts = [1502509047.836174, 1502509047.840846, 1502509047.841847, 1502509047.842045, 1502509047.842874, 1502509047.843544, 1502509047.843844, 1502509047.844542, 1502509047.844843, 1502509047.845041, 1502509047.845842, 1502509047.84654, 1502509047.84684, 1502509047.847039, 1502509047.847839, 1502509047.848038, 1502509047.848838, 1502509047.849037, 1502509047.849837, 1502509047.850037, 1502509047.850835, 1502509047.851554, 1502509047.851836, 1502509047.852534, 1502509047.852833, 1502509047.853032, 1502509047.854005, 1502509047.854033, 1502509047.854833, 1502509047.855552, 1502509047.855831, 1502509047.85603, 1502509047.856829, 1502509047.857529, 1502509047.857828, 1502509047.858029, 1502509047.858827, 1502509047.859527, 1502509047.859826, 1502509047.860526, 1502509047.860825, 1502509047.861026, 1502509047.861825, 1502509047.862523, 1502509047.862823, 1502509047.863524, 1502509047.863822, 1502509047.864021, 1502509047.864821, 1502509047.865022, 1502509047.86582, 1502509047.866021, 1502509047.866819, 1502509047.867535, 1502509047.867817, 1502509047.868518, 1502509047.868817, 1502509047.869017, 1502509047.869815, 1502509047.870516, 1502509047.870919, 1502509047.871514, 1502509047.871815, 1502509047.872014, 1502509047.872813, 1502509047.873013, 1502509047.873813, 1502509047.874012, 1502509047.874811, 1502509047.875512, 1502509047.875824, 1502509047.87651, 1502509047.87681, 1502509047.87701, 1502509047.877807, 1502509047.878508, 1502509047.878808, 1502509047.879507, 1502509047.879817, 1502509047.880506, 1502509047.880817, 1502509047.881506, 1502509047.8866] 
    sig = Signal()
    sig.decode(ts)

def testDecode3():
    ts = [1502509608.616054, 1502509608.621112, 1502509608.622111, 1502509608.622411, 1502509608.62311, 1502509608.623909, 1502509608.624109, 1502509608.624909, 1502509608.625108, 1502509608.625408, 1502509608.626107, 1502509608.626906, 1502509608.627107, 1502509608.627406, 1502509608.628105, 1502509608.628405, 1502509608.629104, 1502509608.629405, 1502509608.630103, 1502509608.630403, 1502509608.631102, 1502509608.631901, 1502509608.632101, 1502509608.6329, 1502509608.6331, 1502509608.6334, 1502509608.634099, 1502509608.634399, 1502509608.635098, 1502509608.635897, 1502509608.636097, 1502509608.636396, 1502509608.637096, 1502509608.637895, 1502509608.638095, 1502509608.638395, 1502509608.639094, 1502509608.639893, 1502509608.640099, 1502509608.640893, 1502509608.641092, 1502509608.641392, 1502509608.642092, 1502509608.64289, 1502509608.643091, 1502509608.643889, 1502509608.644089, 1502509608.644389, 1502509608.645088, 1502509608.645387, 1502509608.646087, 1502509608.646386, 1502509608.647086, 1502509608.647885, 1502509608.648085, 1502509608.648884, 1502509608.649085, 1502509608.649384, 1502509608.650132, 1502509608.650883, 1502509608.651084, 1502509608.651882, 1502509608.652082, 1502509608.652381, 1502509608.653082, 1502509608.65338, 1502509608.65408, 1502509608.65438, 1502509608.65508, 1502509608.655878, 1502509608.656077, 1502509608.656877, 1502509608.657077, 1502509608.657377, 1502509608.658075, 1502509608.658875, 1502509608.659075, 1502509608.659874, 1502509608.660099, 1502509608.660937, 1502509608.661073, 1502509608.661873, 1502509608.666966]
    sig = Signal()
    sig.decode(ts)

def testEncode(duty=1):
    sig = Signal(BitArray('0x123456'), duty)
    sig.show()
    ts = []
    t1 = time.time()
    sig.encode(ts)
    t2 = time.time()
    wave = BitWave(ts)
    wave.rand(sig.period * 0.2)
    wave.show()
    print "Encode time: %.2fms" % ((t2 - t1) * 1000)
    if (duty < 1):
        sig2 = Signal()
        t1 = time.time()
        if sig2.decodePWM(wave.timestamp):
            t2 = time.time()
            print "Decode time: %.2fms" % ((t2 - t1) * 1000)
            sig2.show()

def test1():
    testEncode(1)
    testEncode(0.75)

def test2():
    testDecode1()
    testDecode2()
    testDecode3()

def convert(bstr):
    bits = BitArray(bstr)
    print len(bits), bits

def convert_all():
    for key in ASK_DATA:
        cfg = ASK_DATA[key]
        print key,
        convert(cfg[6])

def main(argv=None):
    if argv is None:
        argv = sys.argv
    convert_all()

if __name__ == "__main__":
    sys.exit(main())

